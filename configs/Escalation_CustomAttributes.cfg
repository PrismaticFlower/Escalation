"custom_attributes"
{
	// Event Info
	//
	//	player_death - The attribute will be applied when the player kills someone.
	//		Supported Actions:
	//			health_on_kill - Supports all variables.
	//			add_cond_on_kill - Supports all variables.
	//
	//	player_hurt - The attribute will be applied when the player hurts another player.
	//		Supported Actions:
	//			mult_damage - Supports all variables.
	//			mult_damage_vs_cond - Supports all variables.
	//			mult_damage_vs_flag - Supports all variables.
	//			mult_damage_vs_entflag - Supports all variables.
	//			apply_condition - Supports all variables.
	//			reapply_conditon - Supports all variables.
	//			remove_condition_delayed - Supports all variables.
	//			crit_vs_conds - Supports all variables.
	//			no_crits_vs_not_conds - Supports all variables.
	//			ignite_player - Supports all variables.
	//			crit_to_minicrit - Supports all variables.
	//			
	//
	//
	//	player_hurt_self - The attribute will be applied when the player takes damage from another player.
	//		Supported Actions:
	//			mult_world_damage - Supports all variables.
	//			mult_damage_vs_cond - Only supports var1.
	//			mult_damage_vs_cond_and_active_weapon - Supports all variables.
	//			mult_damage_vs_flag - Only supports var1 and var2.
	//			mult_damage_vs_entflag - Only supports var1 and var2.
	//			mult_damage_custom - Supports all variables.
	//			negate_damage - Supports all variables.
	//			negate_damage_percent - Supports all variables.
	//
	//	player_jarated - The attribute will be applied when the player jarates or milks another player.
	//		Supported Actions:
	//			apply_stunflags - Supports var1, var2 and var3.
	//			reapply_condition - Supports var1 and var2.
	//
	//	player_arrowed - The attribute will be applied when the player hit another player with an arrow.
	//		Supported Actions:
	//			remove_conditions - Supports all variables.
	//
	//	sound_played - The attribute will be applied when the a sound is played from the player.
	//		Supported Actions:
	//			trace_and_remove_conds - Supports all variables.
	//
	//	Action Info ('V' represents the value assigned to the attribute with Esc_ApplyCustomAttribute)
	//
	//	health_on_kill - Gives V amount of health to the player when they kill someone with any weapon.
	//		var1 = Respect Max Health? If true the player will not be able to overheal themselves by killing someone.
	//		var2 = Max amount the attribute can overheal the player if Respect Max Health is false.
	//	
	//	mult_damage - Multiplies damage done by V.
	//		var1 = Only Multiply if damagecustom equals this custom kill identifier, see the enum in tf2_stocks for a list of the types. Use NULL to have the attribute always be applied regardless of the value.
	//		var2 = Only Multiply if the weapon inflicting the damage has this item definition index. Use NULL to have the attribute always be applied regardless of the weapon. 
	//		var3 = Only Multiply if this is self damage.
	//		var4 = Only Multiply if no weapon inflicted the damage.
	//		var5 = Only Multiply if the weapon in this slot inflicted the damage. Use NULL to ignore this check.
	//
	//	mult_damage_custom - Multiplies damage taken by V if damagecustom equals var1.
	//		var1 = Only Multiply if damagecustom equals this custom kill identifier, see the enum in tf2_stocks for a list of the types. Use NULL to have the attribute always be applied regardless of the value.
	//
	//	mult_world_damage - Multiplies world damage done by V. Only supported in player_hurt_self.
	//
	//	mult_damage_vs_cond - Multiplies damage done by V if the victim is under a condition.
	//		var1 = The condition to check for. See tf2.inc for a list.
	//		var2 = Only Multiply if the weapon inflicting the damage has this item definition index. Use NULL to have the attribute always be applied regardless of the weapon. 
	//		var3 = Only Multiply if this is self damage.
	//		var4 = Only Multiply if no weapon inflicted the damage.
	//		var5 = Only Multiply if the weapon in this slot inflicted the damage. Use NULL to ignore this check.
	//
	//	mult_damage_vs_flag - Multiplies damage done by V if the victim has the stated entity flag.
	//		var1 = The damage flag to check for. See sdkhooks.inc for a list.
	//		var2 = Used to do something amazing and awesome, but currently has no purpose.
	//		var3 = Only Multiply if the weapon inflicting the damage has this item definition index. Use NULL to have the attribute always be applied regardless of the weapon.
	//		var4 = Only Multiply if damagecustom equals this. Use NULL to ignore this check.
	//		var5 = Only Multiply if the weapon in this slot inflicted the damage. Use NULL to ignore this check.
	//
	//	mult_damage_vs_entflag - Multiplies damage done by V if the victim has the stated entity flag.
	//		var1 = The entflag to check for. See entity_prop_stocks.inc for a list.
	//		var2 = Used to do something amazing and awesome, but currently has no purpose.
	//		var3 = Only Multiply if the weapon inflicting the damage has this item definition index. Use NULL to have the attribute always be applied regardless of the weapon.
	//		var4 = Only Multiply if damagecustom equals this. Use NULL to ignore this check.
	//		var5 = Only Multiply if the weapon in this slot inflicted the damage. Use NULL to ignore this check.
	//
	//	apply_condition - Applies a condition to the other player for V amount of time.
	//		var1 = The condition to apply. See tf2.inc for a list of them.
	//		var2 = The condition will be applied only if the damage dealt is greater than this. (Pass NULL or 0 to have it always applied.)
	//		var3 = The condition will be applied only if damagecustom equals this. (Once again see tf2_stocks.inc for a list.)
	//		var4 = The condition will be applied only if the weapon inflicting the damage has this item definition index. Use NULL to have the attribute always be applied regardless of the weapon. 
	//		var5 = The condition will be applied only if the weapon in this slot inflicted the damage. Use NULL to ignore this check.
	//
	//	apply_stunflags (player_jarated only currently, a version for player_hurt will be implemented in the future.) - Applies stunflags to the other player
	//		var1 = The stunflags you're wanting to apply. No help from the plugin currently, go into tf2.inc and manually do the math to get the value you want.
	//		var2 = Interpret V as time to be applied. If false V will be used as the slowdown percent.
	//		var3 = If var2 is false this is the amount of time (in seconds, floats are not supported) to stun the player
	//		var4 = Only stun the other player if this amount of damage was dealt. Pass NULL or 0 for the player to always be stunned. (Only supported in player_hurt.)
	//		var5 = Only stun the other player if the weapon inflicting the damage has this item definition index. Pass NULL for the player to always be stunned. (Only has an effect in player_hurt.)
	//
	//	reapply_condition - Removes and then reapplies a condition with a new duration that is V amount of time to the other player.
	//		var1 = The condtion to remove and reapply.
	//		var2 = If true condtion will be applied only if it the player already had it. Pass false to have it always be applied
	//		var3 = The condition will be applied only if the damage dealt is greater than this. Pass NULL or 0 to have it always applied. (Only supported in player_hurt.)
	//		var4 = The condition will be applied only if the weapon inflicting the damage has this item definition index. Use NULL to have the attribute always be applied regardless of the weapon. (Only supported in player_hurt.)
	//		var5 = The condition will be applied only if the weapon in this slot inflicted the damage. Use NULL to ignore this check.
	//
	//	remove_condition_delayed - Removes a condition from the other player, waits one frame before doing so.
	//		var1 = The condtion to remove.
	//		var2 = The conditon will be removed only if damagecustom equals this.
	//		var3 = The conditon will be removed only if the damage dealt is greater than this. Pass NULL or 0 to have it always applied. (Only supported in player_hurt.)
	//		var4 = The conditon will be removed only if the weapon inflicting the damage has this item definition index. Use NULL to have the attribute always be applied regardless of the weapon. (Only supported in player_hurt.)
	//		var5 = The conditon will be removed only if the weapon in this slot inflicted the damage. Use NULL to ignore this check.
	//
	//	negate_damage - Negates the damage being done to the player by adding 3x the amount of damage done in health to the player before setting it back down after the damage has been done.
	//		var1 = Only negate the damage if damagecustom equals this. Use NULL to ignore this check.
	//		var2 = Only negate the damage if the player is under this conditon. Use NULL to ignore this check.
	//		var3 = Only negate the damage if this damage flag is set.
	//		var4 = Only negate the damage if the player has this entflag set ti var5.
	//		var5 = The value expected from var4's entflag.
	//
	//	negate_damage_percent - Negates the damage being done to the player by adding 3x the amount of damage done in health to the player before setting it back down after the damage has been done.
	//		var1 = Only negate the damage if damagecustom equals this. Use NULL to ignore this check.
	//		var2 = Only negate the damage if the player is under this conditon. Use NULL to ignore this check.
	//		var3 = Only negate the damage if this damage flag is set.
	//		var4 = Only negate the damage if the player has this entflag set to true.
	//		var5 = Only negate the damage if this is self damage.
	//
	//	crit_vs_conds - Inflicts critical damage against the other player if they are under up to three conditions.
	//		var1 = Crit damage will only be inflicted if the player is under this conditon.
	//		var2 = Crit damage will only be inflicted if the player is under this conditon. Use NULL to ignore this check.
	//		var3 = Crit damage will only be inflicted if the player is under this conditon. Use NULL to ignore this check.
	//		var4 = Crit damage will be inflicted only if the weapon inflicting the damage has this item definition index. Use NULL to have the attribute always be applied regardless of the weapon. (Only supported in player_hurt.)
	//		var5 = Crit damage will be inflicted only if the weapon in this slot inflicted the damage. Use NULL to ignore this check.
	//
	//	no_crits_vs_not_conds - Stops Critical Damage against the other player if they are not under up to three conditions.
	//		var1 = Crit damage will only be blocked if the player is not under this conditon.
	//		var2 = Crit damage will only be blocked if the player is not under this conditon. Use NULL to ignore this check.
	//		var3 = Crit damage will only be blocked if the player is not under this conditon. Use NULL to ignore this check.
	//		var4 = Crit damage will be blocked only if the weapon inflicting the damage has this item definition index. Use NULL to have the attribute always be applied regardless of the weapon. (Only supported in player_hurt.)
	//		var5 = Crit damage will be blocked only if the weapon in this slot inflicted the damage. Use NULL to ignore this check.
	//
	//	ignite_player - Ignites the other player.
	//		var1 = The player will be ignited only if the damage dealt is greater than this. (Pass NULL or 0 to have it always applied.)
	//		var1 = The player will be ignited only if damagecustom equals this. (Once again see tf2_stocks.inc for a list.)
	//		var1 = The player will be ignited only if the weapon inflicting the damage has this item definition index. Use NULL to have the attribute always be applied regardless of the weapon. 
	//		var1 = The player will be ignited only if the weapon in this slot inflicted the damage. Use NULL to ignore this check.
	//
	//	mult_damage_vs_cond_and_active_weapon - Multiplies damage done by V if the victim is under a condition and has the weapon in a slot active.
	//		var1 = The condition to check for. See tf2.inc for a list.
	//		var2 = Only Multiply if the weapon in this slot inflicted the damage. Use NULL to ignore this check.
	//
	//	remove_conditions - Removes up to four conditions from the other player.
	//		var1 = If true only remove the conditons if the players are on the same team.
	//		var2 = The first condition to remove.
	//		var3 = The second conditon to remove. Use NULL to ignore this.
	//		var4 = The third condition to remove. Use NULL to ignore this.
	//		var5 = The fourth conditon to remove. Use NULL to ignore this.
	//
	//	trace_and_remove_conds - Removes a conditon from the client the player is looking at.	
	//		var1 = String to search for in the sound being played string.
	//		var2 = If true only remove the conditon if the players are on the same team.
	//		var3 = If not NULL net prop to check V against. Performs a greater than or equal to check.
	//		var4 = The weapon slot to get the entity from for the above check.
	//		var5 = The condition to remove.
	//
	//	crit_to_minicrit - Turns all crits to mini crits.
	//		var1 = The weapon slot to turn crits into mini crits.
	//		var2 = If the attacker is under this condition do not remove the crit.
	//		var3 = If the attacker is under this condition do not remove the crit.
	//		var4 = If the attacker is under this condition do not remove the crit.
	//		var5 = If the attacker is under this condition do not remove the crit.
	//
	//	add_cond_on_kill - Adds up to three conditions to the player and optionally removing a conditon after a frame.
	//		var1 = Only apply the conditions if damagecustom equals this.
	//		var2 = Add this condition to the player. Use NULL to ignore this.
	//		var3 = Add this condition to the player. Use NULL to ignore this.
	//		var4 = Add this condition to the player. Use NULL to ignore this.
	//		var5 = Remove this condition from the player after a frame. Use NULL to ignore this.
	
	
	"10001" //Health on Any Kill
	{
		"event"		"player_death"
		"action"	"health_on_kill"
		"var1"		"true"
		"var2"		"250"
	}
	
	"10002" //Multiply Self Bleed Damage
	{
		"event"		"player_hurt"
		"action"	"mult_damage"
		"var1"		"TF_CUSTOM_BLEEDING"
		"var2"		"NULL"
		"var3"		"true"
		"var4"		"false"
		"var5"		"NULL"
	}
	
	"10003" //Mark Multiple Targets for Death
	{
		"event"		"player_hurt"
		"action"	"apply_condition"
		"var1"		"TFCond_MarkedForDeathSilent"
		"var2"		"NULL"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"2"
	}
	
	"10004" //Multiply Self World Damage
	{
		"event"		"player_hurt"
		"action"	"mult_damage"
		"var1"		"NULL"
		"var2"		"NULL"
		"var3"		"true"
		"var4"		"true"
		"var5"		"NULL"
	}
	
	"10005" //Multiply Ball Damage
	{
		"event"		"player_hurt"
		"action"	"mult_damage"
		"var1"		"TF_CUSTOM_BASEBALL"
		"var2"		"NULL"
		"var3"		"false"
		"var4"		"false"
		"var5"		"NULL"
	}
	
	"10006" //Slowdown Milked Players
	{
		"event"		"player_jarated"
		"action"	"apply_stunflags"
		"var1"		"1" //SLOWDOWN
		"var2"		"false"
		"var3"		"3"
		"var4"		"NULL"
		"var5"		"NULL"
	}

	"10007" //Override Milked Time
	{
		"event"		"player_jarated"
		"action"	"reapply_condition"
		"var1"		"TFCond_Milked" 
		"var2"		"false"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"NULL"
	}

	"10008" //Multiply Damage vs Overhealed Players
	{
		"event"		"player_hurt"
		"action"	"mult_damage_vs_cond"
		"var1"		"TFCond_Overhealed" 
		"var2"		"NULL"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"0"
	}

	"10009" //Multiply Damage vs Grounded Players
	{
		"event"		"player_hurt"
		"action"	"mult_damage_vs_entflag"
		"var1"		"FL_ONGROUND"
		"var2"		"true"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"0"
	}

	"10010" //Negate Grenade Taunt Damage
	{
		"event"		"player_hurt_self"
		"action"	"negate_damage"
		"var1"		"TF_CUSTOM_TAUNT_GRENADE"
		"var2"		"NULL"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"NULL"	
	}
	
	"10011" //Mult Boot Damage
	{
		"event"		"player_hurt"
		"action"	"mult_damage"
		"var1"		"TF_CUSTOM_BOOTS_STOMP"
		"var2"		"NULL"
		"var3"		"false"
		"var4"		"false"
		"var5"		"NULL"	
	}
	
	"10012" //Mult World Damage
	{
		"event"		"player_hurt_self"
		"action"	"mult_world_damage"
		"var1"		"NULL"
		"var2"		"NULL"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"NULL"		
	}
	
	"10013" //Mult Boot Damage Counter
	{
		"event"		"player_hurt"
		"action"	"mult_damage"
		"var1"		"TF_CUSTOM_BOOTS_STOMP"
		"var2"		"NULL"
		"var3"		"false"
		"var4"		"false"
		"var5"		"NULL"	
	}

	"10014" //Multiply Damage While Grounded
	{
		"event"		"player_hurt_self"
		"action"	"mult_damage_vs_entflag"
		"var1"		"FL_ONGROUND"
		"var2"		"true"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"NULL"
	}

	"10015" //Multiply Damage While B.A.S.E. Jumping
	{
		"event"		"player_hurt_self"
		"action"	"mult_damage_vs_cond"
		"var1"		"80" //As far as I can tell 80 is the right condition. (SourceMod currently lacks it in the enum.
		"var2"		"NULL"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"NULL"
	}

	"10016" //Override Marked For Death Time
	{
		"event"		"player_hurt"
		"action"	"remove_condition_delayed"
		"var1"		"TFCond_MarkedForDeath" 
		"var2"		"NULL"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"2"
	}
	
	"10017" //Multiply Damage While Explosive Jumping
	{
		"event"		"player_hurt_self"
		"action"	"mult_damage_vs_cond"
		"var1"		"81" 
		"var2"		"NULL"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"NULL"
	}
	
	"10018" //Multiply Damage vs Burning Players
	{
		"event"		"player_hurt"
		"action"	"mult_damage_vs_cond"
		"var1"		"TFCond_OnFire" 
		"var2"		"NULL"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"2"
	}

	"10019" //Crit vs Pocketed Players
	{
		"event"		"player_hurt"
		"action"	"crit_vs_conds"
		"var1"		"TFCond_Healing" 
		"var2"		"TFCond_Overhealed"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"2"	
	}

	"10020" //No Crit vs Non-Pocketed Players
	{
		"event"		"player_hurt"
		"action"	"no_crits_vs_not_conds"
		"var1"		"TFCond_Healing" 
		"var2"		"TFCond_Overhealed"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"2"	
	}

	"10021" //Multiply Damage vs Airborne Players
	{
		"event"		"player_hurt"
		"action"	"mult_damage_vs_entflag"
		"var1"		"FL_ONGROUND"
		"var2"		"false"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"0"
	}

	"10022" //Multiply Self Damage
	{
		"event"		"player_hurt_self"
		"action"	"negate_damage_percent"
		"var1"		"NULL"
		"var2"		"NULL"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"true"
	}
	
	"10023" //Huo-Long Heater Ignite
	{
		"event"		"player_hurt"
		"action"	"ignite_player"
		"var1"		"15"
		"var2"		"NULL"
		"var3"		"NULL"
		"var4"		"0"
	}
	
	"10024" //Mutliply Damage While Eating
	{
		"event"		"player_hurt_self"
		"action"	"mult_damage_vs_cond_and_active_weapon"
		"var1"		"TFCond_Taunting"
		"var2"		"1"
		"var3"		"NULL"
		"var4"		"NULL"
		"var5"		"NULL"
	}

	"10025" //Crossbow Remove Bleeding and Burning
	{
		"event"		"player_arrowed"
		"action"	"remove_conditions"
		"var1"		"true"
		"var2"		"TFCond_OnFire"
		"var3"		"TFCond_Bleeding"
		"var4"		"NULL"
		"var5"		"NULL"
	}

	"10026" //Sleeper Removes Burning
	{
		"event"		"sound_played"
		"action"	"trace_and_remove_conds"
		"var1"		"$weapons/sniper_sydneysleeper_shoot"
		"var2"		"true"
		"var3"		"$m_flChargedDamage"
		"var4"		"0"
		"var5"		"TFCond_OnFire"
	}

	"10027" //Headshot Crits To Mini-Crits Primary
	{
		"event"		"player_hurt"
		"action"	"crit_to_minicrit"
		"var1"		"0"
		"var2"		"TFCond_Kritzkrieged"
		"var3"		"TFCond_CritOnFirstBlood"
		"var4"		"TFCond_CritOnWin"
		"var5"		"TFCond_CritOnFlagCapture"
	}

	"10028" //Cloak On Backstab
	{
		"event"		"player_death"
		"action"	"add_cond_on_kill"
		"var1"		"TF_CUSTOM_BACKSTAB"
		"var2"		"TFCond_Stealthed"
		"var3"		"TFCond_Cloaked"
		"var4"		"NULL"
		"var5"		"TFCond_Stealthed"
	}

}